//----------------------------BOOT MODULE-------------------------------------------
//--------------------------MODULE 7--------------------------------------------------

//-------------------------loading from DISK---------------------

//Exception Handler
loadi(2,15);
loadi(3,14);

//Timer Interrupt Handler
loadi(4,17);
loadi(5,18);

//Disk Controller Interrupt Routine
loadi(6,19);
loadi(7,20);

//Console Interrupt Handler
loadi(8,21);
loadi(9,22);

//Interrupt 4 Routine : Create, Delete
loadi(10,23);
loadi(11,24);

//Interrupt 6 Routine : Read
loadi(14,27);
loadi(15,28);

//Interrupt 7 Routine : Write
loadi(16,29);
loadi(17,30);

//Interrupt 8 Routine : Fork
loadi(18,31);
loadi(19,32);

//Interrupt 9 Routine : Exec
loadi(20,33);
loadi(21,34);

//Interrupt 10 Routine : Exit
loadi(22,35);
loadi(23,36);

//Interrupt 11 Routine : Getpid, Getppid, Wait, Signal
loadi(24,37);
loadi(25,38);

//Interrupt 13 Routine : Semget, Semrelease
loadi(28,41);
loadi(29,42);

//Interrupt 14 Routine : SemLock, SemUnlock
loadi(30,43);
loadi(31,44);

//Interrupt 15 routine : Shutdown
loadi(32,45);
loadi(33,46);

//Module 0 : Resource Manager
loadi(40,53);
loadi(41,54);

//Module 1 : Process Manager
loadi(42,55);
loadi(43,56);

//Module 2 : Memory Manager
loadi(44,57);
loadi(45,58);

//Module 4 : Device Manager
loadi(48,61);
loadi(49,62);

//Module 5 : Context Switch Module (Scheduler Module)
loadi(50,63);
loadi(51,64);

//Inode Table
loadi(59,3);
loadi(60,4);

//Disk Free List
loadi(61,2);

//Root File
loadi(62,5);

//Expos Library
loadi(63,13);
loadi(64,14);

//INIT
loadi(65,7);
loadi(66,8);

//--------------------------------------------------------------------

//------INITIALIZE STATE FIELD TO TERMINATED OF REMAINING PROCESS----------
alias p_num R0;
alias addrs_state_procs R1;
p_num = 1;

while (p_num < 16) do

	addrs_state_procs = PROCESS_TABLE + 16*p_num + 4;
	[addrs_state_procs] = TERMINATED;
	p_num = p_num + 1;

endwhile;

//--------------------------------------------------------------------------

//---------------------Initialising INIT------------------------

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//LIBRARY
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//HEAP
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//CODE
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//STACK
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 3] = 1;		//temporary userid root
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80;		//UAPN
[PROCESS_TABLE + 16 + 12] = 0;		//KPTR
[PROCESS_TABLE + 16 + 13] = 8*512;	//UPTR
[PROCESS_TABLE + 16 + 14] = PTBR;	//PTBR
[PROCESS_TABLE + 16 + 15] = PTLR;	//PTLR 

[76*512] = [65*512+1];		//ENTRY POINT

//Initialize Per Process Resource Table of INIT
alias i R0;
i = 496;

while (i <= 511) do

	[80 * 512 + i] = -1;
	i = i + 2;

endwhile;

//Disk Map Table
i = 0;
while (i < 10) do

	[DISK_MAP_TABLE + 10 + i] = -1;
	i = i + 1;

endwhile;

[DISK_MAP_TABLE + 10 + 4] = 7;
[DISK_MAP_TABLE + 10 + 5] = 8;

//------------------------------------------------------------------------


//------------------updating MEMORY_FREE_LIST-----------------------------

i = 0;
while (i < 128) do

	if (i <= 82) then
	
		[MEMORY_FREE_LIST + i] = 1;

	else 

		[MEMORY_FREE_LIST + i] = 0;

	endif;
	i = i + 1;

endwhile;

//WAIT_MEM_COUNT---------> 0
[SYSTEM_STATUS_TABLE + 3] = 0;

//MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 2] = 45;			//1-75 resv for os 
							//76-80 for INIT Page Table
							//81-82 for idle Page Table

//-----------------------------------------------------------------------

//-----------------initialize semaphore table----------------------------

i = 0;
while (i < 32) do

	//locking pid -1
	[SEMAPHORE_TABLE + i*4] = -1;
	//process count ---> 0
	[SEMAPHORE_TABLE + i*4 + 1] = 0;
	i = i+1;

endwhile;

//----------------initialize file status table---------------------------

i = 0;
while (i < MAX_FILE_NUM) do
	
	//locking pid
	[FILE_STATUS_TABLE + i*4] = -1;
	//file open count
	[FILE_STATUS_TABLE + i*4 + 1] = -1;
	i = i+1;

endwhile;

//---------------------initialize buffer table------------------------------

i = 0;
while (i < 4) do

	//blocknumber
	[BUFFER_TABLE + i*4] = -1;
	//dirty bit
	[BUFFER_TABLE + i*4 + 1] = 0;
	//locking pid
	[BUFFER_TABLE + i*4 + 2] = -1;
	i = i+1;

endwhile;

//Unlocking the Terminal
[TERMINAL_STATUS_TABLE + 0] = 0;

//set the disk free
[DISK_STATUS_TABLE] = 0;

return;

