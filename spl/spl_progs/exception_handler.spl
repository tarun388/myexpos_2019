//-----------------------------Exception Handler------------------------------------------------------------

//Mode Flag -------> -1
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

alias userSP R0;
userSP = SP;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

backup;

multipush (EIP);

if (EC == 1) then 

	print "Illegal";
	print "Instruction";
	
	backup;
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	restore;
	
	backup;
	call MOD_5;
	restore;

endif;

if (EC == 2) then

	print "Illegal";
	print "Memory";
	print "Access";
	
	backup;
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	restore;

	backup;
	call MOD_5;
	restore;

endif;

if (EC == 3) then

	print "Arithmetic";
	print "Fault";
	
	backup;
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	restore;

	backup;
	call MOD_5;
	restore;
	
endif;


if (EC == 0) then 

	//Exception due to code page
	if ((EPN >= 4) && (EPN <= 7)) then 

		backup;
		R1 = GET_CODE_PAGE;
		R2 = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + EPN];
		call MOD_2;
		[PTBR + EPN * 2] = R0;
		[PTBR + EPN * 2 + 1] = "1100";
		restore;

	endif;

	//Exception due to Heap page
	if ((EPN == 2) || (EPN == 3)) then

		backup;
		R1 = GET_FREE_PAGE;
		call MOD_2;
		[PTBR + EPN * 2] = R0;
		[PTBR + EPN * 2 + 1] = "1110";
		restore;

		//ckup;
		// = GET_FREE_PAGE;
		//ll MOD_2;
		//TBR + 6] = R0;
		//TBR + 7] = "1110";
		//store;

	endif;

endif;

multipop (EIP);

restore;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

//Increment SP
SP = SP + 1;

//Translate the SP address
//and store EIP at that address
//so that execution shall start
//from the exception caising instruction
[ [PTBR + 2 * (SP / 512)] * 512 + (SP % 512) ] = EIP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
