//------------------------------PROCESS MANAGER MODULE-----------------------------
//-----------------------------MODULE 1----------------------------------------------

alias functionNum R1;
alias exitPID R2;

if (functionNum == GET_PCB_ENTRY) then

	alias i R4;
	i = 0;
	
	//loop through the Process Table
	//if process table entry free
	//return index
	while (i < 16) do

		if ([PROCESS_TABLE + i * 16 + 4] == TERMINATED) then
		
			alias procs_table R5;
			procs_table = PROCESS_TABLE + i*16;
			[procs_table + 1] = i;
			[procs_table + 4] = ALLOCATED;
			[procs_table + 14] = PAGE_TABLE_BASE + 20 * i;
			[procs_table + 15] = 10;
			R0 = i;
			return;		
	
		endif;
		i = i + 1;

	endwhile;

	//if none of the process table is free
	R0 = -1;
	return;

endif;

if (functionNum == FREE_USER_AREA_PAGE) then

	alias UAPN R3;
	UAPN = [PROCESS_TABLE + exitPID * 16 + 11];
	alias i R4;
	i = 496;
	alias semID R5;

	//release all the semaphore 
	//which aren't released yet
	//close all the files the process has opened
	//and haven't closed explicitly
	while (i <= 511) do

		if ([UAPN*512 + i] == SEMAPHORE) then
			semID = [UAPN*512 + i+1];
			backup;
			R1 = RELEASE_SEMAPHORE;
			R3 = exitPID;
			R2 = semID; 
			call MOD_0;
			restore;	
		endif;

		if ([UAPN*512 + i] == FILE) then
			backup;
			R1 = CLOSE;
			R2 = [UAPN*512 + i + 1];
			call MOD_3;
			restore;
		endif;

		i = i+2;

	endwhile;	

	backup;
	R1 = RELEASE_PAGE;
	R2 = UAPN;
	call MOD_2;
	restore;	
	return;

endif;

if (functionNum == EXIT_PROCESS) then 

	backup;
	R1 = FREE_PAGE_TABLE;
	R2 = exitPID;
	call MOD_1;
	restore;

	backup;
	R1 = FREE_USER_AREA_PAGE;
	R2 = exitPID;
	call MOD_1;
	restore;

	[PROCESS_TABLE + exitPID * 16 + 4] = TERMINATED;

	//process only if
	//call didn't come from
	//exec
	if ([PROCESS_TABLE + (exitPID * 16) + 9] != 9) then
	
		alias i R5;
		i = 0;

		//for all those processes
		//whose parent process is
		//the exiting process
		// and are in wait list
		//ready them
		while (i < 16) do

			if (([PROCESS_TABLE + (i*16) + 4] == WAIT_PROCESS) && ([PROCESS_TABLE + (i*16) + 5] == exitPID)) then
			
				[PROCESS_TABLE + (i*16) + 4] = READY;

			endif;

			//orpahn the child of current exiting process
			if ([PROCESS_TABLE + (i*16) + 2] == exitPID) then
					
				[PROCESS_TABLE + (i*16) + 2] = -1;
	
			endif;
			i = i + 1;
	
		endwhile;

	endif;

	return;

endif;

if  (functionNum == FREE_PAGE_TABLE) then

	alias page_table_base R6;
	R6 = PAGE_TABLE_BASE + exitPID * 20;
	//invalidate the page table entries for the library
	[page_table_base + 0] = -1;
	[page_table_base + 1] = "0000";
	[page_table_base + 2] = -1;
	[page_table_base + 3] = "0000";

	//release the page for each valid page table entry in the page table, and invalidate the entry
	alias i R4;
	i = 4;
	while (i <= 18) do

		if ([page_table_base + i] != -1) then
		
			backup;
			R1 = RELEASE_PAGE;
			R2 = [page_table_base + i];
			call MOD_2;
			restore;
			[page_table_base + i] = -1;
			[page_table_base + i + 1] = "0000";

		endif;
		i = i + 2;	

	endwhile;

	//Release the disk block, and invalidate the DISK_MAP_TABLE
	//call RELEASE BLOCK to free the occupied block
	i = 0;
	while (i < 10) do

		if (([DISK_MAP_TABLE + exitPID*10 + i] != -1) && (i == 2 || i == 3 || i == 8 || i == 9)) then 

			backup;
			R1 = RELEASE_BLOCK;
			R3 = exitPID;
			R2 = [DISK_MAP_TABLE + exitPID*10 + i];
			call MOD_2;
			restore;

		endif;
		[DISK_MAP_TABLE + exitPID*10 + i] = -1;
		i = i + 1;

	endwhile;

	return;

endif;

if (functionNum == KILL_ALL) then

	alias curPID R2;

	alias inodeindex R5;
	inodeindex = 0;
	while (inodeindex < MAX_FILE_NUM) do
		//for valid inode entry
		if ([INODE_TABLE + inodeindex*16 + 1] != 1) then
			//lock that inode
			backup;
			R1 = ACQUIRE_INODE;
			R2 = inodeindex;
			R3 = curPID;
			call MOD_0;
			restore;
		endif;
		inodeindex = inodeindex + 1;
	endwhile;

	alias pid R6;
	//pid 0 and pid 1 are of idle and init
	//which shouldn,t be killed
	pid = 2;
	
	while (pid < MAX_PROC_NUM) do

		if ((pid != SWAPPER_DAEMON) && (pid != curPID) && ([PROCESS_TABLE + pid*16 + 4] != TERMINATED)) then
			backup;
			R1 = EXIT_PROCESS;
			R2 = pid;
			call MOD_1;
			restore;
		endif;
		pid = pid + 1;
	endwhile;

	inodeindex = 0;
	while (inodeindex < MAX_FILE_NUM) do
		//for valid inode entry
		if ([INODE_TABLE + inodeindex*16 + 1] != 1) then
			//release the lock
			backup;
			R1 = RELEASE_INODE;
			R2 = inodeindex;
			R3 = curPID;
			call MOD_0;
			restore;
		endif;
		inodeindex = inodeindex + 1;
	endwhile;

	return;

endif;
