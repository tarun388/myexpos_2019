//----------------------------RESOURCE MANAGER MODULE-----------------------------------------
//------------------------------MODULE 0-----------------------------------------------

alias functionNum R1;
alias currentPID R2;
alias retval R0;

if (functionNum == ACQUIRE_DISK) then

	//check the status of disk 
	//if not free 
	//set the state of current process to WAIT_DISK
	//call scheduler
	while ([DISK_STATUS_TABLE] == 1) do

		[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_DISK;

		backup;
		call MOD_5;
		restore;

	endwhile;

	//Disk is now free
	//This process has been scheduled

	//LOCK the disk
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;

	return;

endif;

if (functionNum == 8) then
//Acquire Terminal

	//multipush (R1, R2);
	backup;
	currentPID = [SYSTEM_STATUS_TABLE + 1];	

	while ([TERMINAL_STATUS_TABLE + 0] == 1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;		//change the state of the current process in its process table entry to WAIT_TERMINAL
		//multipush (R1, R2);
		backup;

		call MOD_5;

		restore;
		//multipop (R1, R2);

	endwhile;

	[TERMINAL_STATUS_TABLE + 0] = 1;			//status field to 1
	[TERMINAL_STATUS_TABLE + 1] = currentPID;

	//multipop (R1, R2);
	restore;
	return;	

endif;
 
if(functionNum == 9) then
//Release Terminal

	if ([TERMINAL_STATUS_TABLE + 1] != currentPID) then 
		print(currentPID);
		retval = -1;
		return;

	endif;	

	[TERMINAL_STATUS_TABLE + 0] = 0;
	
	//multipush (R1);
	backup;

	alias tempid R1;
	tempid = 0;

	while (tempid < 16) do
		if ([PROCESS_TABLE + tempid*16 + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + tempid*16 + 4] = READY;
		endif;
		tempid = tempid + 1;
	endwhile;

	retval = 0;

	//multipop (R1);
	restore;
	//breakpoint;

	return;

endif;

//---------------------------------------modification uptil STAGE 14---------------------------------------------------------------
